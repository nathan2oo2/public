<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>QR Code Generator</title>
  <style>
    body {
      font-family: sans-serif;
      padding: 40px 100px;
      background: #121212;
      color: #e0e0e0;
    }
    h1 {
      text-align: center;
      font-size: 2em;
      margin-bottom: 20px;
    }
    #main-container {
      display: flex;
      justify-content: center;
      align-items: flex-start;
      gap: 60px;
      flex-wrap: wrap;
    }
    .text-input {
      flex: 1;
      min-width: 300px;
    }
    .qr-section {
      flex: 0 0 auto;
      text-align: center;
    }
    #qrcode svg {
      max-width: 300px;
      height: auto;
      margin-top: 10px;
    }
    .controls {
      margin-top: 20px;
      padding-top: 20px;
      border-top: 1px solid #333;
    }
    .controls label {
      display: block;
      margin-top: 15px;
    }
    .controls button {
      margin: 10px 5px 0 5px;
      padding: 10px 15px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      background-color: #333;
      color: #fff;
      cursor: pointer;
    }
    .controls button:hover {
      background-color: #555;
    }
    textarea {
      width: 100%;
      height: 500px;
      padding: 10px;
      font-size: 1em;
      border-radius: 5px;
      border: none;
      resize: vertical;
      background-color: #2a2a2a;
      color: #e0e0e0;
    }
    input[type="range"] {
      width: 100%;
    }
    #errorMsg {
      color: red;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h1>QR Code Generator</h1>
  <div id="main-container">
    <div class="text-input">
      <label>Enter Text:
        <textarea id="qrText">Hello, World!</textarea>
      </label>
    </div>
    <div class="qr-section">
      <div id="qrcode"></div>
      <div id="errorMsg"></div>
      <div class="controls">
        <label>Error Correction Level:
          <input type="range" id="errorLevel" min="0" max="3" value="1">
          <span id="errorLabel">M</span>
        </label>

        <button id="invertBtn">Toggle Invert</button>
       <button id="styleBtn">Toggle Eye Style</button>
        <button id="downloadBtn">Download SVG</button>
        <button id="downloadPngBtn">Download PNG</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/qrcode-svg@1.1.0/dist/qrcode.min.js"></script>
  <script>
    const textInput = document.getElementById('qrText');
    const errorInput = document.getElementById('errorLevel');
    const errorLabel = document.getElementById('errorLabel');
    const invertBtn = document.getElementById('invertBtn');
    const styleBtn = document.getElementById('styleBtn');
    const downloadBtn = document.getElementById('downloadBtn');
    const downloadPngBtn = document.getElementById('downloadPngBtn');
    const qrContainer = document.getElementById('qrcode');
    const errorMsg = document.getElementById('errorMsg');

    let inverted = true;
    let rounded = false;
    const levels = ['L', 'M', 'Q', 'H'];

    let currentSVG = '';

    function generateQR() {
      const text = textInput.value;
      const level = levels[parseInt(errorInput.value)];
      const fg = inverted ? '#fff' : '#000';
      const bg = inverted ? '#000' : '#fff';

      try {
        const qr = new QRCode({
          content: text,
          padding: 4,
          width: 256,
          height: 256,
          color: fg,
          background: bg,
          ecl: level,
          join: true,
          container: 'svg-viewbox',
          round: rounded
        });
        const svgString = qr.svg();
        currentSVG = svgString;
        qrContainer.innerHTML = svgString;
        errorMsg.textContent = '';
      } catch (e) {
        qrContainer.innerHTML = '';
        errorMsg.textContent = 'Error: Text too long to encode in QR code.';
        currentSVG = '';
      }
    }

    errorInput.addEventListener('input', () => {
      errorLabel.textContent = levels[parseInt(errorInput.value)];
      generateQR();
    });

    textInput.addEventListener('input', generateQR);

    invertBtn.addEventListener('click', () => {
      inverted = !inverted;
      generateQR();
    });

    styleBtn.addEventListener('click', () => {
      rounded = !rounded;
      generateQR();
    });

    downloadBtn.addEventListener('click', () => {
      const blob = new Blob([currentSVG], {type: 'image/svg+xml'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'qr_code.svg';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });

    downloadPngBtn.addEventListener('click', () => {
      const svg = new Blob([currentSVG], {type: 'image/svg+xml'});
      const url = URL.createObjectURL(svg);

      const img = new Image();
      img.onload = function () {
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        URL.revokeObjectURL(url);

        canvas.toBlob((blob) => {
          const pngUrl = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = pngUrl;
          a.download = 'qr_code.png';
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(pngUrl);
        }, 'image/png');
      };
      img.src = url;
    });

    // Initial QR render
    generateQR();
  </script>
</body>
</html>
